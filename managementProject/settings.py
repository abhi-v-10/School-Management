"""
Django settings for managementProject project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config, RepositoryEnv
import os
import dj_database_url
from django.contrib.messages import constants as messages


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env_path = os.path.join(BASE_DIR, '.env')
# config = Config(repository=RepositoryEnv(env_path))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY", default="insecure-development-key-change-me")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# Build ALLOWED_HOSTS dynamically. Always include localhost/127.0.0.1.
_env_hosts_raw = config('ALLOWED_HOSTS', default='')
_env_hosts = [h.strip() for h in _env_hosts_raw.split(',') if h.strip()]
# Allow any Vercel preview/prod subdomain.
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '.vercel.app'] + _env_hosts
# De-duplicate while preserving order.
_seen = set()
ALLOWED_HOSTS = [h for h in ALLOWED_HOSTS if not (h in _seen or _seen.add(h))]
AUTH_USER_MODEL = 'accountsApp.User'


# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'accountsApp',
    'attendanceApp',
    'classesApp',
    'examsApp',
    'messagingApp',
    'studentsApp',
    'teachersApp',
    'parentsApp',
    'social_django',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
]

ROOT_URLCONF = 'managementProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'managementProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use DATABASE_URL if provided (e.g. production). In local/dev, fall back to local postgres.
_db_url = config('DATABASE_URL', default='').strip()
ON_VERCEL = os.environ.get('VERCEL') == '1'
ON_RENDER = os.environ.get('RENDER') == '1' or os.environ.get('RENDER_EXTERNAL_HOSTNAME') is not None

if ON_RENDER:
    # Use Render PostgreSQL database
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('RENDER_DB_NAME', ''),
            'USER': os.environ.get('RENDER_DB_USER', ''),
            'PASSWORD': os.environ.get('RENDER_DB_PASSWORD', ''),
            'HOST': os.environ.get('RENDER_DB_HOST', ''),
            'PORT': os.environ.get('RENDER_DB_PORT', '5432'),
            'CONN_MAX_AGE': int(os.environ.get('RENDER_DB_CONN_MAX_AGE', '600')),
            'OPTIONS': {
                'sslmode': 'require',
            },
        }
    }
elif ON_VERCEL and _db_url:
    # Use Supabase/Postgres remote DB for Vercel
    _parsed = dj_database_url.parse(_db_url)
    _parsed['CONN_MAX_AGE'] = int(config('CONN_MAX_AGE', default=600))
    opts = _parsed.get('OPTIONS', {})
    if 'sslmode' not in opts:
        opts['sslmode'] = 'require'
    _parsed['OPTIONS'] = opts
    DATABASES = {
        'default': _parsed
    }
else:
    # Local development: use local Postgres
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('LOCAL_DB_NAME', default='mydb'),
            'USER': config('LOCAL_DB_USER', default='postgres'),
            'PASSWORD': config('LOCAL_DB_PASSWORD', default='admin'),
            'HOST': config('LOCAL_DB_HOST', default='localhost'),
            'PORT': config('LOCAL_DB_PORT', default='5432'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
MESSAGE_TAGS = {
    messages.DEBUG: 'secondary',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'

AUTHENTICATION_BACKENDS = [
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
]

SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS = {
    'prompt': 'select_account'
}

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = config("GOOGLE_OAUTH_CLIENT_ID")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = config("GOOGLE_OAUTH_CLIENT_SECRET")

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

# ðŸ‘‡ for production (collectstatic output folder)
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Always include the top-level 'static' directory so collectstatic on Vercel
# will gather your CSS/JS/images (including .role-btn styles) even when
# DEBUG is False in production.
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# ðŸ‘‡ optional, only if you want extra static dirs in dev
# Serve the local 'static' directory during development so styles like role-btn are visible.
# if DEBUG:
#     STATICFILES_DIRS = [
#         os.path.join(BASE_DIR, 'static'),
#     ]

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Media (user uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Email configuration (for notification signals) ---
# Allow overriding via environment; fall back to console backend for dev.
EMAIL_BACKEND = config("EMAIL_BACKEND", default="django.core.mail.backends.console.EmailBackend")
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL", default="School Management <no-reply@example.com>")
EMAIL_HOST = config("EMAIL_HOST", default="")
EMAIL_PORT = config("EMAIL_PORT", default=587, cast=int)
EMAIL_HOST_USER = config("EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", default="")
EMAIL_USE_TLS = config("EMAIL_USE_TLS", default=True, cast=bool)
# If both TLS and SSL are set, prefer TLS (common case). Django will handle mutually exclusive usage at runtime.

