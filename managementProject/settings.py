"""
Django settings for managementProject project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config, RepositoryEnv
import os
import dj_database_url
from django.contrib.messages import constants as messages


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env_path = os.path.join(BASE_DIR, '.env')
# config = Config(repository=RepositoryEnv(env_path))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY", default="insecure-development-key-change-me")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

"""ALLOWED_HOSTS logic

We keep it simple for Render:
 - Always allow localhost / 127.0.0.1 for local dev.
 - Add anything specified via ALLOWED_HOSTS env var (comma separated).
 - If running on Render, append the platform-provided hostname (RENDER_EXTERNAL_HOSTNAME).
"""
_env_hosts_raw = config('ALLOWED_HOSTS', default='')
_env_hosts = [h.strip() for h in _env_hosts_raw.split(',') if h.strip()]
render_hostname = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
ALLOWED_HOSTS = ['127.0.0.1', 'localhost'] + _env_hosts + ([render_hostname] if render_hostname else [])
_seen = set()
ALLOWED_HOSTS = [h for h in ALLOWED_HOSTS if h and not (h in _seen or _seen.add(h))]
AUTH_USER_MODEL = 'accountsApp.User'


# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Realtime
    'channels',

    'accountsApp',
    'attendanceApp',
    'classesApp',
    'examsApp',
    'messagingApp',
    'studentsApp',
    'teachersApp',
    'parentsApp',
    'resourcesApp',
    'social_django',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
]

ROOT_URLCONF = 'managementProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'managementProject.wsgi.application'
ASGI_APPLICATION = 'managementProject.asgi.application'

# Channels layer (in-memory default; for production use Redis)
REDIS_URL = os.environ.get('REDIS_URL') or config('REDIS_URL', default='')
if REDIS_URL:
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': { 'hosts': [REDIS_URL] }
        }
    }
else:
    # Fallback for local/dev without Redis
    CHANNEL_LAYERS = {
        'default': { 'BACKEND': 'channels.layers.InMemoryChannelLayer' }
    }


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

_db_url = config('DATABASE_URL', default='').strip()
_force_sqlite = config('USE_SQLITE_FOR_DEV', default=False, cast=bool)
# Global override: force SQLite everywhere (including Render) when set.
_force_all_sqlite = config('FORCE_SQLITE', default=False, cast=bool)
# Explicit opt-in to use DATABASE_URL locally (kept off by default so local dev relies on SQLite).
_local_use_postgres = config('LOCAL_USE_POSTGRES', default=False, cast=bool)

def _with_pg_keepalives(parsed: dict) -> dict:
    """Inject SSL + optional keepalive tuning for remote Postgres.

    Previous version used invalid GUC names (keepalives*) causing:
      FATAL: unrecognized configuration parameter "keepalives"
    Correct Postgres parameters are tcp_keepalives_*.
    Controlled by env PG_KEEPALIVES (default: enabled on Render only).
    Set PG_KEEPALIVES=0 to disable the tuning.
    """
    opts = parsed.get('OPTIONS', {})
    if 'sslmode' not in opts:
        opts['sslmode'] = 'require'
    enable = True
    try:
        enable = config('PG_KEEPALIVES', default='1' if os.environ.get('RENDER') else '0', cast=bool)
    except Exception:
        enable = True
    # Only add if caller didn't already provide custom options
    if enable and 'options' not in opts:
        # conservative values; avoid too aggressive pings
        opts['options'] = '-c tcp_keepalives_idle=60 -c tcp_keepalives_interval=30 -c tcp_keepalives_count=5'
    parsed['OPTIONS'] = opts
    return parsed

"""Database selection strategy

Local (no RENDER env var):
  - Default: SQLite (fast, zero-config) ignoring any accidental DATABASE_URL.
  - Optional: set LOCAL_USE_POSTGRES=1 to allow using DATABASE_URL locally.
Render (RENDER env var present):
  - Use Postgres via DATABASE_URL (required) unless FORCE_SQLITE=1 (not recommended for prod).
Force flags:
  - FORCE_SQLITE / USE_SQLITE_FOR_DEV => always SQLite.
"""

if _force_all_sqlite or _force_sqlite:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
elif os.environ.get('RENDER'):
    if not _db_url:
        raise RuntimeError("DATABASE_URL not set on Render. Provide a Postgres URL or set FORCE_SQLITE=1 (NOT recommended).")
    _parsed = dj_database_url.parse(_db_url, conn_max_age=int(config('CONN_MAX_AGE', default=600)))
    DATABASES = { 'default': _with_pg_keepalives(_parsed) }
else:
    if _local_use_postgres and _db_url:
        _parsed = dj_database_url.parse(_db_url, conn_max_age=int(config('CONN_MAX_AGE', default=0)))
        DATABASES = { 'default': _with_pg_keepalives(_parsed) }
    else:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
MESSAGE_TAGS = {
    messages.DEBUG: 'secondary',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'

AUTHENTICATION_BACKENDS = [
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
]

SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS = {
    'prompt': 'select_account'
}

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = config("GOOGLE_OAUTH_CLIENT_ID")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = config("GOOGLE_OAUTH_CLIENT_SECRET")

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

# ðŸ‘‡ for production (collectstatic output folder)
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Always include the top-level 'static' directory so collectstatic will
# gather your CSS/JS/images even when DEBUG is False in production.
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# ðŸ‘‡ optional, only if you want extra static dirs in dev
# Serve the local 'static' directory during development so styles like role-btn are visible.
# if DEBUG:
#     STATICFILES_DIRS = [
#         os.path.join(BASE_DIR, 'static'),
#     ]

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Media (user uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

WEBSOCKETS_ENABLED = config('WEBSOCKETS_ENABLED', default=True, cast=bool)

# Allow overriding session backend via env (e.g., signed cookies when DB unreachable)
SESSION_ENGINE = config('SESSION_ENGINE', default='django.contrib.sessions.backends.db')

# --- Email configuration ---
EMAIL_BACKEND = config("EMAIL_BACKEND", default="django.core.mail.backends.console.EmailBackend")
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL", default="School Management <no-reply@example.com>")
EMAIL_HOST = config("EMAIL_HOST", default="")
EMAIL_PORT = config("EMAIL_PORT", default=587, cast=int)
EMAIL_HOST_USER = config("EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", default="")
EMAIL_USE_TLS = config("EMAIL_USE_TLS", default=True, cast=bool)

# --- Security / Proxy headers (Render runs behind a proxy) ---
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# --- CSRF Trusted Origins ---
# Always build this list (even in DEBUG) so misconfigured DEBUG on production doesn't break forms.
_csrf_env = config('CSRF_TRUSTED_ORIGINS', default='')
_csrf_list = [o.strip() for o in _csrf_env.split(',') if o.strip()]
if render_hostname:
    # Add the Render primary hostname automatically (https scheme)
    _csrf_list.append(f"https://{render_hostname}")
# De-duplicate while preserving order
_seen_csrf = set()
CSRF_TRUSTED_ORIGINS = [o for o in _csrf_list if not (o in _seen_csrf or _seen_csrf.add(o))]

if DEBUG and not CSRF_TRUSTED_ORIGINS:
    # Helpful hint in development logs (only emitted when someone inspects settings or prints it)
    pass  # Intentionally no origins; local same-origin posts will still work.

